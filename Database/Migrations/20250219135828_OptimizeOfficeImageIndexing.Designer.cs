// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250219135828_OptimizeOfficeImageIndexing")]
    partial class OptimizeOfficeImageIndexing
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Database.Models.AccessLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AccessLevels", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Name = "Super Admin"
                        },
                        new
                        {
                            Id = -2,
                            Name = "Customer Service"
                        });
                });

            modelBuilder.Entity("Database.Models.Address", b =>
                {
                    b.Property<int>("BaseUserId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("DetailedAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MapUrl")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Neighborhood")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BaseUserId", "Id");

                    b.HasIndex("CityId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("Database.Models.Content.DCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DCategories", (string)null);
                });

            modelBuilder.Entity("Database.Models.Content.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UploadedById")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("UploadedById");

                    b.ToTable("Documents", (string)null);
                });

            modelBuilder.Entity("Database.Models.Content.DocumentCategory", b =>
                {
                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("DCategoryId")
                        .HasColumnType("int");

                    b.HasKey("DocumentId", "DCategoryId");

                    b.HasIndex("DCategoryId");

                    b.ToTable("DocumentCategories", (string)null);
                });

            modelBuilder.Entity("Database.Models.Content.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Name = "Article"
                        },
                        new
                        {
                            Id = -2,
                            Name = "Template"
                        },
                        new
                        {
                            Id = -3,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("Database.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateOnly>("IssueDate")
                        .HasColumnType("date");

                    b.Property<string>("IssuingAuthority")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LicenceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ServiceProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("Licenses", (string)null);
                });

            modelBuilder.Entity("Database.Models.Others.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("Database.Models.Others.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("Database.Models.Others.OfficeImageUrl", b =>
                {
                    b.Property<int>("ServiceProviderId")
                        .HasColumnType("int");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("ServiceProviderId", "Id");

                    b.ToTable("OfficeImageUrls", (string)null);
                });

            modelBuilder.Entity("Database.Models.Others.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States", (string)null);
                });

            modelBuilder.Entity("Database.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("PaymentGateway")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.HasKey("Id");

                    b.ToTable("Payments", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Database.Models.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseUserId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("BaseUserId");

                    b.ToTable("PhoneNumbers", (string)null);
                });

            modelBuilder.Entity("Database.Models.Problem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ReportedBy")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceProviderId")
                        .HasColumnType("int");

                    b.Property<int?>("SolvingAdminId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ServiceId")
                        .IsUnique();

                    b.HasIndex("ServiceProviderId");

                    b.HasIndex("SolvingAdminId");

                    b.ToTable("Problems", (string)null);
                });

            modelBuilder.Entity("Database.Models.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = -2,
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = -3,
                            Name = "Service Provider",
                            NormalizedName = "SERVICE PROVIDER"
                        });
                });

            modelBuilder.Entity("Database.Models.Services.AppointmentCost", b =>
                {
                    b.Property<int>("ServiceProviderId")
                        .HasColumnType("int");

                    b.Property<string>("AppointmentType")
                        .HasColumnType("char(1)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("ServiceProviderId", "AppointmentType");

                    b.ToTable("AppointmentCosts", (string)null);
                });

            modelBuilder.Entity("Database.Models.Services.CaseFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConsultCaseId")
                        .HasColumnType("int");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ConsultCaseId");

                    b.ToTable("CaseFiles", (string)null);
                });

            modelBuilder.Entity("Database.Models.Services.ClientServiceProviderFeedback", b =>
                {
                    b.Property<int>("ServiceProviderId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.HasKey("ServiceProviderId", "ClientId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientServiceProviderFeedbacks", (string)null);
                });

            modelBuilder.Entity("Database.Models.Services.EmergencyCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ServiceProviderTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceProviderTypeId");

                    b.ToTable("EmergencyCategories", (string)null);
                });

            modelBuilder.Entity("Database.Models.Services.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ServiceProviderId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("Services", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Database.Models.Services.Slot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceProviderId")
                        .HasColumnType("int");

                    b.Property<string>("SlotType")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("Slots", (string)null);
                });

            modelBuilder.Entity("Database.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ServiceProviderId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceProviderId")
                        .IsUnique();

                    b.ToTable("Subscriptions", (string)null);
                });

            modelBuilder.Entity("Database.Models.Users.BaseUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int?>("BlockedById")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.HasKey("Id");

                    b.HasIndex("BlockedById");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("BaseUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Database.Models.Users.ServiceProviderSpecialization", b =>
                {
                    b.Property<int>("ServiceProviderId")
                        .HasColumnType("int");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.HasKey("ServiceProviderId", "SpecializationId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("ServiceProviderSpecializations", (string)null);
                });

            modelBuilder.Entity("Database.Models.Users.ServiceProviderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ServiceProviderTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Name = "Lawyer"
                        });
                });

            modelBuilder.Entity("Database.Models.Users.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ServiceProviderTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceProviderTypeId");

                    b.ToTable("Specializations", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Database.Models.Others.ServicePayment", b =>
                {
                    b.HasBaseType("Database.Models.Payment");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasIndex("ServiceId")
                        .IsUnique()
                        .HasFilter("[ServiceId] IS NOT NULL");

                    b.ToTable("ServicePayments", (string)null);
                });

            modelBuilder.Entity("Database.Models.Others.SubscriptionPayment", b =>
                {
                    b.HasBaseType("Database.Models.Payment");

                    b.Property<int>("ServiceProviderId")
                        .HasColumnType("int");

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("SubscriptionPayments", (string)null);
                });

            modelBuilder.Entity("Database.Models.Services.Appointment", b =>
                {
                    b.HasBaseType("Database.Models.Services.Service");

                    b.Property<string>("AppointmentType")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("SlotId")
                        .HasColumnType("int");

                    b.HasIndex("SlotId");

                    b.ToTable("Appointments", (string)null);
                });

            modelBuilder.Entity("Database.Models.Services.ConsultationCase", b =>
                {
                    b.HasBaseType("Database.Models.Services.Service");

                    b.ToTable("ConsultationCases", (string)null);
                });

            modelBuilder.Entity("Database.Models.Services.EmergencyCase", b =>
                {
                    b.HasBaseType("Database.Models.Services.Service");

                    b.Property<string>("CurrentLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("EmergencyCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("TimeForArrival")
                        .HasColumnType("int");

                    b.HasIndex("EmergencyCategoryId");

                    b.ToTable("EmergencyCases", (string)null);
                });

            modelBuilder.Entity("Database.Models.Services.Question", b =>
                {
                    b.HasBaseType("Database.Models.Services.Service");

                    b.Property<bool>("Visibility")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("Database.Models.Users.Admin", b =>
                {
                    b.HasBaseType("Database.Models.Users.BaseUser");

                    b.Property<int>("AccessLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.HasIndex("AccessLevelId");

                    b.HasIndex("ApprovedById");

                    b.ToTable("Admins", (string)null);
                });

            modelBuilder.Entity("Database.Models.Users.Client", b =>
                {
                    b.HasBaseType("Database.Models.Users.BaseUser");

                    b.Property<float>("Rate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("Database.Models.Users.ServiceProvider", b =>
                {
                    b.HasBaseType("Database.Models.Users.BaseUser");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<string>("CurrentLocation")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsAvailableForEmergency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsFeatured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MainImage")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<float>("Rate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("TypeId");

                    b.ToTable("ServiceProviders", (string)null);
                });

            modelBuilder.Entity("Database.Models.Address", b =>
                {
                    b.HasOne("Database.Models.Users.BaseUser", "BaseUser")
                        .WithMany("Addresses")
                        .HasForeignKey("BaseUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Models.Others.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaseUser");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Database.Models.Content.Document", b =>
                {
                    b.HasOne("Database.Models.Content.DocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Models.Users.Admin", "UploadedBy")
                        .WithMany("UploadedDocuments")
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("Database.Models.Content.DocumentCategory", b =>
                {
                    b.HasOne("Database.Models.Content.DCategory", "Category")
                        .WithMany("DocumentCategories")
                        .HasForeignKey("DCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Models.Content.Document", "Document")
                        .WithMany("DocumentCategories")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Database.Models.License", b =>
                {
                    b.HasOne("Database.Models.Users.ServiceProvider", "ServiceProvider")
                        .WithMany("Licenses")
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("Database.Models.Others.City", b =>
                {
                    b.HasOne("Database.Models.Others.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Models.Others.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Database.Models.Others.OfficeImageUrl", b =>
                {
                    b.HasOne("Database.Models.Users.ServiceProvider", "ServiceProvider")
                        .WithMany("OfficeImageUrls")
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("Database.Models.Others.State", b =>
                {
                    b.HasOne("Database.Models.Others.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Database.Models.PhoneNumber", b =>
                {
                    b.HasOne("Database.Models.Users.BaseUser", "BaseUser")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("BaseUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseUser");
                });

            modelBuilder.Entity("Database.Models.Problem", b =>
                {
                    b.HasOne("Database.Models.Users.Client", "Client")
                        .WithMany("Problems")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Models.Services.Service", "Service")
                        .WithOne("Problem")
                        .HasForeignKey("Database.Models.Problem", "ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Models.Users.ServiceProvider", "ServiceProvider")
                        .WithMany("Problems")
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Models.Users.Admin", "SolvingAdmin")
                        .WithMany("AssignedProblems")
                        .HasForeignKey("SolvingAdminId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Client");

                    b.Navigation("Service");

                    b.Navigation("ServiceProvider");

                    b.Navigation("SolvingAdmin");
                });

            modelBuilder.Entity("Database.Models.Services.AppointmentCost", b =>
                {
                    b.HasOne("Database.Models.Users.ServiceProvider", "ServiceProvider")
                        .WithMany("AppointmentCosts")
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("Database.Models.Services.CaseFile", b =>
                {
                    b.HasOne("Database.Models.Services.ConsultationCase", "ConsultCase")
                        .WithMany("CaseFiles")
                        .HasForeignKey("ConsultCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsultCase");
                });

            modelBuilder.Entity("Database.Models.Services.ClientServiceProviderFeedback", b =>
                {
                    b.HasOne("Database.Models.Users.Client", "Client")
                        .WithMany("ClientServiceProviderFeedbacks")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Models.Users.ServiceProvider", "ServiceProvider")
                        .WithMany("ClientServiceProviderFeedbacks")
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("Database.Models.Services.EmergencyCategory", b =>
                {
                    b.HasOne("Database.Models.Users.ServiceProviderType", "ServiceProviderType")
                        .WithMany("EmergencyCategories")
                        .HasForeignKey("ServiceProviderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceProviderType");
                });

            modelBuilder.Entity("Database.Models.Services.Service", b =>
                {
                    b.HasOne("Database.Models.Users.Client", "Client")
                        .WithMany("RequestedServices")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Models.Users.ServiceProvider", "ServiceProvider")
                        .WithMany("ServicesProvided")
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Client");

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("Database.Models.Services.Slot", b =>
                {
                    b.HasOne("Database.Models.Users.ServiceProvider", "ServiceProvider")
                        .WithMany("Slots")
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("Database.Models.Subscription", b =>
                {
                    b.HasOne("Database.Models.Users.ServiceProvider", "ServiceProvider")
                        .WithOne("Subscription")
                        .HasForeignKey("Database.Models.Subscription", "ServiceProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("Database.Models.Users.BaseUser", b =>
                {
                    b.HasOne("Database.Models.Users.Admin", "BlockedBy")
                        .WithMany("BlockedUsers")
                        .HasForeignKey("BlockedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BlockedBy");
                });

            modelBuilder.Entity("Database.Models.Users.ServiceProviderSpecialization", b =>
                {
                    b.HasOne("Database.Models.Users.ServiceProvider", "ServiceProvider")
                        .WithMany("ServiceProviderSpecializations")
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Models.Users.Specialization", "Specialization")
                        .WithMany("ServiceProviderSpecializations")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceProvider");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Database.Models.Users.Specialization", b =>
                {
                    b.HasOne("Database.Models.Users.ServiceProviderType", "ServiceProviderType")
                        .WithMany("Specializations")
                        .HasForeignKey("ServiceProviderTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ServiceProviderType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Database.Models.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Database.Models.Users.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Database.Models.Users.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Database.Models.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Models.Users.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Database.Models.Users.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Models.Others.ServicePayment", b =>
                {
                    b.HasOne("Database.Models.Payment", null)
                        .WithOne()
                        .HasForeignKey("Database.Models.Others.ServicePayment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Models.Services.Service", "Service")
                        .WithOne("ServicePayment")
                        .HasForeignKey("Database.Models.Others.ServicePayment", "ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Database.Models.Others.SubscriptionPayment", b =>
                {
                    b.HasOne("Database.Models.Payment", null)
                        .WithOne()
                        .HasForeignKey("Database.Models.Others.SubscriptionPayment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Models.Users.ServiceProvider", "ServiceProvider")
                        .WithMany("SubscriptionPayments")
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("Database.Models.Services.Appointment", b =>
                {
                    b.HasOne("Database.Models.Services.Service", null)
                        .WithOne()
                        .HasForeignKey("Database.Models.Services.Appointment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Models.Services.Slot", "Slot")
                        .WithMany("Appointments")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("Database.Models.Services.ConsultationCase", b =>
                {
                    b.HasOne("Database.Models.Services.Service", null)
                        .WithOne()
                        .HasForeignKey("Database.Models.Services.ConsultationCase", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Models.Services.EmergencyCase", b =>
                {
                    b.HasOne("Database.Models.Services.EmergencyCategory", "EmergencyCategory")
                        .WithMany("EmergencyCases")
                        .HasForeignKey("EmergencyCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Models.Services.Service", null)
                        .WithOne()
                        .HasForeignKey("Database.Models.Services.EmergencyCase", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmergencyCategory");
                });

            modelBuilder.Entity("Database.Models.Services.Question", b =>
                {
                    b.HasOne("Database.Models.Services.Service", null)
                        .WithOne()
                        .HasForeignKey("Database.Models.Services.Question", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Models.Users.Admin", b =>
                {
                    b.HasOne("Database.Models.AccessLevel", "AccessLevel")
                        .WithMany("Admins")
                        .HasForeignKey("AccessLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Models.Users.Admin", "ApprovingAdmin")
                        .WithMany("ApprovedAdmins")
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Models.Users.BaseUser", null)
                        .WithOne()
                        .HasForeignKey("Database.Models.Users.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessLevel");

                    b.Navigation("ApprovingAdmin");
                });

            modelBuilder.Entity("Database.Models.Users.Client", b =>
                {
                    b.HasOne("Database.Models.Users.BaseUser", null)
                        .WithOne()
                        .HasForeignKey("Database.Models.Users.Client", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Models.Users.ServiceProvider", b =>
                {
                    b.HasOne("Database.Models.Users.Admin", "ApprovingAdmin")
                        .WithMany("ApprovedServiceProviders")
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Models.Users.BaseUser", null)
                        .WithOne()
                        .HasForeignKey("Database.Models.Users.ServiceProvider", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Models.Users.ServiceProviderType", "Type")
                        .WithMany("ServiceProviders")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovingAdmin");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Database.Models.AccessLevel", b =>
                {
                    b.Navigation("Admins");
                });

            modelBuilder.Entity("Database.Models.Content.DCategory", b =>
                {
                    b.Navigation("DocumentCategories");
                });

            modelBuilder.Entity("Database.Models.Content.Document", b =>
                {
                    b.Navigation("DocumentCategories");
                });

            modelBuilder.Entity("Database.Models.Content.DocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Database.Models.Others.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Database.Models.Others.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("States");
                });

            modelBuilder.Entity("Database.Models.Others.State", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Database.Models.Services.EmergencyCategory", b =>
                {
                    b.Navigation("EmergencyCases");
                });

            modelBuilder.Entity("Database.Models.Services.Service", b =>
                {
                    b.Navigation("Problem");

                    b.Navigation("ServicePayment");
                });

            modelBuilder.Entity("Database.Models.Services.Slot", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Database.Models.Users.BaseUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("PhoneNumbers");
                });

            modelBuilder.Entity("Database.Models.Users.ServiceProviderType", b =>
                {
                    b.Navigation("EmergencyCategories");

                    b.Navigation("ServiceProviders");

                    b.Navigation("Specializations");
                });

            modelBuilder.Entity("Database.Models.Users.Specialization", b =>
                {
                    b.Navigation("ServiceProviderSpecializations");
                });

            modelBuilder.Entity("Database.Models.Services.ConsultationCase", b =>
                {
                    b.Navigation("CaseFiles");
                });

            modelBuilder.Entity("Database.Models.Users.Admin", b =>
                {
                    b.Navigation("ApprovedAdmins");

                    b.Navigation("ApprovedServiceProviders");

                    b.Navigation("AssignedProblems");

                    b.Navigation("BlockedUsers");

                    b.Navigation("UploadedDocuments");
                });

            modelBuilder.Entity("Database.Models.Users.Client", b =>
                {
                    b.Navigation("ClientServiceProviderFeedbacks");

                    b.Navigation("Problems");

                    b.Navigation("RequestedServices");
                });

            modelBuilder.Entity("Database.Models.Users.ServiceProvider", b =>
                {
                    b.Navigation("AppointmentCosts");

                    b.Navigation("ClientServiceProviderFeedbacks");

                    b.Navigation("Licenses");

                    b.Navigation("OfficeImageUrls");

                    b.Navigation("Problems");

                    b.Navigation("ServiceProviderSpecializations");

                    b.Navigation("ServicesProvided");

                    b.Navigation("Slots");

                    b.Navigation("Subscription");

                    b.Navigation("SubscriptionPayments");
                });
#pragma warning restore 612, 618
        }
    }
}
